<?php

/**
 * @file
 * Implements the basic functionality required to create and display a stock entity.
 */

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function stocks_entity_info() {
	$info['stocks'] = array(
		// A human readable label to identify our entity.
		'label' => t('Stock Entity'),

		// The default controller for our Entity,
		'controller class' => 'StockController',

		// The table for this entity defined in hook_schema()
		'base table' => 'stocks',

		// Returns the uri elements of an entity
		'uri callback' => 'stock_uri',

		// IF fieldable == FALSE, we can't attach fields.
		'fieldable' => TRUE,

		// entity_keys tells the controller what database fields are used for key
		// functions. It is not required if we don't have bundles or revisions.
		// Here we do not support a revision, so that entity key is omitted.
		'entity keys' => array(
		  'id' => 'id' , // The 'id' of the stock.
		  'bundle' => 'bundle_type' // Bundle will be determined by the 'bundle_type' field
		),
		'bundle keys' => array(
		  'bundle' => 'bundle_type',
		),

		// FALSE disables caching. Caching functionality is handled by Drupal core.
		'static cache' => TRUE,

		// Bundles are alternative groups of fields or configuration
		// associated with a base entity type.
		
		'bundles' => array(
		  'stock' => array(
			'label' => 'First stock bundle',
			// 'admin' key is used by the Field UI to provide field and
			// display UI pages.
			'admin' => array(
			  'path' => 'admin/structure/stock/manage',
			  'access callback' => TRUE, //should use permissions to be secure
			),
		  ),
		),
		// View modes allow entities to be displayed differently based on context.
		// As a demonstration we'll support "Tweaky", but we could have and support
		// multiple display modes.
		'view modes' => array(
		  'full' => array(
			'label' => t('Full mode'),
			'custom settings' =>  FALSE,
		  ),
		)
	  );

	return $info;
 }

/**
 * Fetch a basic object.
 *
 * This function ends up being a shim between the menu system and
 * entity_example_basic_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value). In our case defining
 * the path: examples/entity_example/basic/%entity_example_basic in
 * hook_menu() tells Drupal to call entity_example_basic_load().
 *
 * @param $basic_id
 *   Integer specifying the basic entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see entity_example_basic_load_multiple()
 * @see entity_example_menu()
 */
function stock_load($basic_id = NULL, $reset = FALSE) {
	//dsm("stock_load called");
	$basic_ids = (isset($basic_id) ? array($basic_id) : array());
	$basic = stock_load_multiple($basic_ids, array(), $reset);
	return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function stock_load_multiple($basic_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('stocks', $basic_ids, $conditions, $reset);
}

 /**
 * We save the entity by calling the controller.
 */
function entity_example_basic_save(&$entity) {
  return entity_get_controller('stocks')->save($entity);
}
 /**
 * Implements the uri callback.
 */
function stocks_uri($stock) {
  return array(
    'path' => 'entity/stock/' . $stock->id,
  );
}

/**
 * Implements hook_menu().
 */
function stocks_menu() {
	$items['stocks'] = array(
	'title' => t('Stock Entity Example'),
	'page callback' => 'stocks_info_page',
	'access callback' => TRUE,
	'type' => MENU_CALLBACK,
	);

	// This provides a place for Field API to hang its own
	// interface and has to be the same as what was defined
	// in basic_entity_info() above.
	/*
	$items['admin/structure/entity_example_basic/manage'] = array(
	'title' => 'Administer entity_example_basic entity type',
	'page callback' => 'entity_example_basic_list_entities',
	'access arguments' => array('administer entity_example_basic entities'),
	);
	*/
	// Add example entities.
	$items['admin/structure/stocks/manage/add'] = array(
	'title' => t('Add a Stock Entity'),
	'page callback' => 'entity_example_basic_add',
	'access callback' => TRUE,
	'type' => MENU_LOCAL_ACTION,
	);

	// List of all entity_example_basic entities.
	$items['admin/structure/stocks/manage/list'] = array(
	'title' => 'List',
	'type' => MENU_DEFAULT_LOCAL_TASK,
	);

	// The page to view our entities - needs to follow what
	// is defined in basic_uri and will use load_basic to retrieve
	// the necessary entity info.
	$items['stocks/%stock'] = array(
	//'title callback' => 'entity_example_basic_title',
	//'title arguments' => array(1),
	'page callback' => 'stocks_basic_view',
	'page arguments' => array(1),
	'access callback' => TRUE,
	);

	// 'View' tab for an individual entity page.
	$items['stocks/%stock/view'] = array(
	'title' => 'View',
	'type' => MENU_DEFAULT_LOCAL_TASK,
	'weight' => -10,
	);

	// 'Edit' tab for an individual entity page.
	$items['stocks/%stock/edit'] = array(
		'title' => 'Edit',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('stocks_basic_form', 1),
		'access callback' => TRUE,
		'type' => MENU_LOCAL_TASK,
	);

	// Add example entities.
	
	$items['stocks/add'] = array(
		'title' => 'Add a Stock Entity',
		'page callback' => 'stocks_basic_add',
		'access callback' => TRUE,
	);
	
	return $items;
}
function stocks_info_page() {
	$content['preface'] = array(
	'#type' => 'item',
	'#markup' => t('The stocks module provides a simple stock entity.')
	);
	/*
	if (user_access('administer entity_example_basic entities')) {
	$content['preface']['#markup'] =  t('You can administer these and add fields and change the view !link.',
	  array('!link' => l(t('here'), 'admin/structure/entity_example_basic/manage'))
	);
	}
	$content['table'] = entity_example_basic_list_entities();
	*/
	return $content;
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function stocks_basic_view($stock, $view_mode = 'full') {
	// Our entity type, for convenience.
	$entity_type = 'stocks';
	// Start setting up the content.
	$stock->content = array(
	'#view_mode' => $view_mode,
	);
	// Build fields content - this is where the Field API really comes in to play.
	// The task has very little code here because it all gets taken care of by
	// field module.
	// field_attach_prepare_view() lets the fields load any data they need
	// before viewing.
	field_attach_prepare_view($entity_type, array($stock->id => $stock),
	$view_mode);
	// We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
	// for us.
	entity_prepare_view($entity_type, array($stock->id => $stock));
	// Now field_attach_view() generates the content for the fields.
	$stock->content += field_attach_view($entity_type, $stock, $view_mode);

	// OK, Field API done, now we can set up some of our own data.
	$stock->content['created'] = array(
		'#type' => 'item',
		'#title' => t('Created date'),
		'#markup' => format_date($stock->created),
	);
	$stock->content['name'] = array(
		'#type' => 'item',
		'#title' => t('Stock name'),
		'#markup' => $stock->name,
	);
	$stock->content['value'] = array(
		'#type' => 'item',
		'#title' => t('Value'),
		'#markup' => $stock->value,
	);

	// Now to invoke some hooks. We need the language code for
	// hook_entity_view(), so let's get that.
	global $language ;
	$langcode = $language->language ;
	// And now invoke hook_entity_view().
	module_invoke_all('entity_view', $stock, $entity_type, $view_mode,
	$langcode);
	// Now invoke hook_entity_view_alter().
	drupal_alter(array('entity_example_basic_view', 'entity_view'),
	$stock->content, $entity_type);

	// And finally return the content.
	return $stock->content;
}

/* Forms to edit */

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function stocks_basic_add() {
	// Create a basic entity structure to be used and passed to the validation
	// and submission functions.
	$entity = entity_get_controller('stocks')->create();
	return drupal_get_form('stocks_basic_form', $entity);
}

/**

**/


/**
 * Form function to create an entity_example_basic entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function stocks_basic_form($form, &$form_state, $entity) {
	
	$form['stock_name'] = array(
		'#type' => 'textfield',
		'#title' => t('Stock Name'),
		'#required' => TRUE,
		'#default_value' => $entity->name,
	);
	$form['stock_value'] = array(
		'#type' => 'textfield',
		'#title' => t('Stock value'),
		'#required' => TRUE,
		'#default_value' => $entity->value,
	);

	$form['basic_entity'] = array(
		'#type' => 'value',
		'#value' => $entity,
	);

	field_attach_form('stocks', $entity, $form, $form_state);

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#weight' => 100,
	);
	/*
	$form['delete'] = array(
		'#type' => 'submit',
		'#value' => t('Delete'),
		'#submit' => array('entity_example_basic_edit_delete'),
		'#weight' => 200,
	);
	*/
	return $form;
}


/**
 * Validation handler for entity_example_basic_add_form form.
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function stocks_basic_form_validate($form, &$form_state) {
	if(!is_numeric($form_state['values']['stock_value'])){
		form_error($form['stock_value'],t('Value must be numeric'));
	}
	field_attach_form_validate('entity_example_basic', $form_state['values']['basic_entity'], $form, $form_state);
}


/**
 * Form submit handler: submits basic_add_form information
 */
function stocks_basic_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  $entity->name = $form_state['values']['stock_name'];
  $entity->value = $form_state['values']['stock_value'];
  field_attach_submit('entity_example_basic', $entity, $form, $form_state);
  $entity = entity_example_basic_save($entity);
  $form_state['redirect'] = 'stocks/' . $entity->id;
}

/**
 * EntityExampleBasicControllerInterface definition.
 *
 * We create an interface here because anyone could come along and
 * use hook_entity_info_alter() to change our controller class.
 * We want to let them know what methods our class needs in order
 * to function with the rest of the module, so here's a handy list.
 *
 * @see hook_entity_info_alter()
 */

interface EntityExampleBasicControllerInterface
  extends DrupalEntityControllerInterface {
  public function create();
  public function save($entity);
  public function delete($entity);
}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 *
 * Our subclass of DrupalDefaultEntityController lets us add a few
 * important create, update, and delete methods.
 */
class StockController
  extends DrupalDefaultEntityController
  implements EntityExampleBasicControllerInterface {

  /**
   * Create and return a new entity_example_basic entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'stocks';
    $entity->id = 0;
    $entity->bundle_type = 'stock';
    $entity->name = '';
	$entity->value = '';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record()
   */
  public function save($entity) {
    // If our entity has no basic_id, then we need to give it a
    // time of creation.
    if (empty($entity->id)) {
      $entity->created = time();
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'stocks');
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // basic_id as the key.
    $primary_keys = $entity->id ? 'id' : array();
    // Write out the entity record.
    drupal_write_record('stocks', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    if (empty($primary_keys)) {
      field_attach_insert('stocks', $entity);
    }
    else {
      field_attach_update('stocks', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'stocks');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for delete_multiple().
   */
  public function delete($entity) {
    $this->delete_multiple(array($entity));
  }

  /**
   * Delete one or more entity_example_basic entities.
   *
   * Deletion is unfortunately not supported in the base
   * DrupalDefaultEntityController class.
   *
   * @param $basic_ids
   *   An array of entity IDs or a single numeric ID.
   */
  public function delete_multiple($entities) {
    $basic_ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'stocks');
          field_attach_delete('stocks', $entity);
          $basic_ids[] = $entity->id;
        }
        db_delete('stocks')
          ->condition('id', $basic_ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('entity_example', $e);
        throw $e;
      }
    }
  }
}
